<!--pages/vue/key.wxml-->
<view class="page">
    <view class="content" wx:if="{{key==0}}">
        <view class="title">说说你对 SPA 单页面的理解，它的优缺点分别是什么？</view>
        <view>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA
            不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</view>
        <view> <text class="num">单页面应用（SPA）</text>
            通俗的说就是指只有一个主页面的应用，浏览器一开始就加载所有的js、html、css。所有的页面内容都包含在这个主页面中。但在写的时候，还是分开写，然后再加护的时候有路由程序动态载入，单页面的页面跳转，仅刷新局部资源。多用于pc端。
        </view>
        <view><text class="num">多页面应用（MPA）</text>就是一个应用中有多个页面，页面跳转时是整页刷新
        </view>
        <view class="num">优点：</view>
        <view>1、用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</view>
        <view>2、基于上面一点，SPA 相对对服务器压力小；</view>
        <view>3、前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</view>
        <view class="num">缺点：</view>
        <view>1、初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</view>
        <view>2、前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</view>
        <view>3、SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</view>
    </view>
    <view class="content" wx:if="{{key==1}}">
        <view class="title">对vue的理解</view>
        <view class="title">简单的说——</view>
        <view> <text class="num">关键点：</text> 渐进式 JavaScript 框架、核心库加插件、动态创建用户界面（异步获取后台数据，数据展示在界面）</view>
        <view><text class="num">特点：</text> MVVM 模式；代码简洁体积小，运行效率高，适合移动PC端开发；本身只关注 UI ，可以轻松引入 Vue 插件或其他的第三方库进行开发。</view>
        <view class="num">MVVM解释</view>
        <view>全称： Model-View-ViewModel ， Model 表示数据模型层。 view 表示视图层， ViewModel 是 View 和 Model 层的桥梁，数据绑定到 viewModel
            层并自动渲染到页面中，视图变化通知 viewModel 层更新数据。</view>
        <view class="title">详细的说——</view>
        <view>Vue 是一个构建数据驱动的渐进性框架，它的目标是通过API 实现响应数据绑定和视图更新。</view>
        <view class="num">优点</view>
        <view>1、数据驱动视图，对真实dom 进行抽象出virtual dom（本质就是一个js 对象），并配合diff 算法、响应式和观察者、异步队列等手段以最小代价更新dom，渲染页面。</view>
        <view>2、组件化，组件用单文件的形式进行代码的组织编写，使得我们可以在一个文件里编写html\css（scoped 属性配置css 隔离）\js 并且配合Vue-loader 之后，支持更强大的预处理器等功能。
        </view>
        <view>3、由于采用虚拟dom，让Vue ssr 先天就足，强大且丰富的API 提供一系列的api 能满足业务开发中各类需求。</view>
        <view>4、生命周期钩子函数，选项式的代码组织方式，写熟了还是蛮顺畅的，但仍然有优化空间（Vue3 composition-api） </view>
        <view class="num">缺点</view>
        <view>1、由于底层基于Object.defineProperty（vue3.0采用 new Proxy()） 实现响应式，而这个api 本身不支持IE8及以下浏览器</view>
        <view>2、csr （client server render）的先天不足，首屏性能问题（白屏）</view>
        <view>3、由于百度等搜索引擎爬虫无法爬取js 中的内容，故spa 先天就对seo 优化心有余力不足（谷歌的puppeteer 就挺牛逼的，实现预渲染底层也是用到了这个工具）</view>
    </view>
    <view class="content" wx:if="{{key==2}}">
        <view class="title">什么是虚拟DOM？</view>
        <view>虚拟dom 是相对于浏览器所渲染出来的真实dom 的，在react，vue 等技术出现之前， 我们要改变页面展示的内容只能通过遍历查询dom 树的方式找到需要修改的dom 然
            后修改样式行为或者结构，来达到更新ui 的目的。</view>
        <view>这种方式相当消耗计算资源，因为每次查询dom 几乎都需要遍历整颗dom 树，如果
            建立一个与dom 树对应的虚拟dom 对象（ js 对象），以对象嵌套的方式来表示dom
            树，那么每次dom 的更改就变成了js 对象的属性的更改，这样一来就能查找js 对象
            的属性变化要比查询dom 树的性能开销小。</view>
    </view>
    <view class="content" wx:if="{{key==3}}">
        <view class="title">vue 生命周期</view>
        <view>Vue生命周期是指vue实例对象从创建之初到销毁的过程，vue所有功能的实现都是围绕其生命周期进行的，在生命周期的不同阶段调用对应的钩子函数可以实现组件数据管理和DOM渲染两大重要功能。</view>
        <view class="num">vue生命周期的八个阶段</view>
        <view> <text class="num">beforeCreate:</text>会在实例初始化完成、props 解析之后、data() 和 computed 等选项处理之前立即调用。此时不能获得DOM节点。
        </view>
        <view> <text class="num">created:</text>在这个阶段vue实例已经创建，以下内容已经设置完成：响应式数据、计算属性、方法和侦听器。然而，此时挂载阶段还未开始，因此 $el
            属性仍不可用。仍然不能获取DOM元素。
        </view>
        <view> <text class="num">beforeMount:</text>在组件内容被渲染到页面之前自动执行的函数，组件已经完成了其响应式状态的设置，但还没有创建 DOM 节点。
        </view>
        <view> <text class="num">mounted:</text>在组件被渲染之后自动执行的函数。一般我们的异步请求都写在这里。在这个阶段，数据和DOM都已被渲染出来。
        </view>
        <view> <text class="num">beforeUpdate:</text>数据变化的时候自动执行的函数，此时变化后的数据还未渲染到页面之上。.
        </view>
        <view> <text class="num">updated:</text>数据变化之后自动执行的函数，此时变化后的数据已经渲染到页面之上。
        </view>
        <view> <text class="num">beforeUnmount:</text>当 Vue 应用被销毁时，自动执行的函数。
        </view>
        <view> <text class="num">unmounted:</text>当 Vue 应用被销毁后，且 dom 完全销毁之后，自动执行的函数。
        </view>
    </view>
    <view class="content" wx:if="{{key==4}}">
        <view class="title">vue的双向绑定原理</view>
        <view>
            vue数据的双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。其核心就是通过Object.defineProperty()方法设置set和get函数来实现数据的劫持，在数据变化时发布消息给订阅者，触发相应的监听回调。也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变。
        </view>
        <view class="num">问法2：vue是如何实现响应式数据的呢？（响应式数据原理）</view>
        <view>Vue2： Object.defineProperty 重新定义 data 中所有的属性， Object.defineProperty
            可以使数据的获取与设置增加一个拦截的功能，拦截属性的获取，进行依赖收集。拦截属性的更新操作，进行通知。</view>
        <view>具体的过程：首先Vue使用 initData 初始化用户传入的参数，然后使用 new Observer 对数据进行观测，如果数据是一个对象类型就会调用 this.walk（value） 对对象进行处理，内部使用
            defineReactive 循环对象属性定义响应式变化，核心就是使用 Object.defineProperty 重新定义数据。</view>
        <view>————————了解————————</view>
        <view class="num">MVC模式</view>
        <view>以往的MVC模式是单向绑定，即Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。</view>
        <image src="../../img/vue1.png" mode="aspectFit"></image>
        <view class="num">MVVM模式</view>
        <view>就是Model–View–ViewModel模式。它实现了View的变动，自动反映在
            ViewModel，反之亦然。对于双向绑定的理解，就是用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定。再说细点，就是在单向绑定的基础上给可输入元素input、textare等添加了change(input)事件，(change事件触发，View的状态就被更新了)来动态修改model。
        </view>
        <image src="../../img/vue2.png" mode="aspectFit"></image>
        <view>MVVM模式的优点：</view>
        <view>1、低耦合:View可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</view>
        <view>2、可重用性: 可以把一些视图逻辑放在一个ViewModel里面，让很多View重用这段视图逻辑。</view>
        <view>3、独立开发: 开发人员可以专注于业务逻辑和数据的开发，设计人员可以专注于页面的设计。</view>
        <view class="num">mvc与mvvm的区别：</view>
        <view>
            MVC和MVVM的区别并不是VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务逻辑组件的重用。
        </view>
        <view>- MVC中Controller演变成MVVM中的ViewModel</view>
        <view>- MVVM通过数据来显示视图层而不是节点操作</view>
        <view>- MVVM主要解决了MVC中大量的dom操作使页面渲染性能降低，加载速度变慢，影响用户体验等问题。
        </view>
    </view>
    <view class="content" wx:if="{{key==5}}">
        <view class="title">vue的指令有哪些</view>
        <view>v-once指令、v-show指令、v-if指令、v-else指令、v-else-if指令、v-for指令、v-html指令、v-text指令、v-bind指令、v-on指令、v-model指令等等。
        </view>
        <view class="num">v-once </view>
        <view>只会执行一次渲染，当数据发生改变时，不会再变化</view>
        <image class="v6" src="../../img/v1.png" mode="aspectFit"></image>
        <view class="num">v-show</view>
        <view>v-show接受一个表达式或一个布尔值。相当于给元素添加一个display属性</view>
        <image class="v2" src="../../img/v2.png" mode="aspectFit"></image>
        <view class="num">v-if、v-else、v-else-if</view>
        <view>v-if和v-show有同样的效果，不同在于v-if是重新渲染，而v-show使用display属性来控制显示隐藏。频繁切换的话使用v-show减少渲染带来的开销。</view>
        <view>v-if可以单独使用，而v-else-if,v-else必须与v-if组合使用，v-if、v-else-if都是接受一个条件或布尔值，v-else不需要参数</view>
        <image class="v3" src="../../img/v3.png" mode="aspectFit"></image>
        <view class="num">v-for</view>
        <view>v-for可用来遍历数组、对象、字符串。</view>
        <image class="v4" src="../../img/v4.png" mode="aspectFit"></image>
        <view class="num">v-text和v-html</view>
        <view>v-text是渲染字符串，会覆盖原先的字符串</view>
        <view>v-html是渲染为html。{{}}双大括号和v-text都是输出为文本。那如果想输出为html，使用v-html。</view>
        <image class="v5" src="../../img/v5.png" mode="aspectFit"></image>
        <view class="num">v-bind</view>
        <view>可以将标签内的属性值解析成js代码，在标签的属性中使用v-bind，双引号里的内容会被当作js解析（只能解析变量或三元表达式）</view>
        <view>如果给属性值设置为一个变量，那么可以使用v-bind</view>
        <image class="v6" src="../../img/v6.png" mode="aspectFit"></image>
        <view class="num">v-on</view>
        <view>v-on用于事件绑定</view>
        <image class="v7" src="../../img/v7.png" mode="aspectFit"></image>
        <view class="num">v-model</view>
        <view>数据双向绑定指令，限制在input、select、textarea、components中使用</view>
        <image class="v8" src="../../img/v8.png" mode="aspectFit"></image>
    </view>
    <view class="content" wx:if="{{key==6}}">
        <view class="title">v-if和v-show区别</view>
        <view class="num">v-show与v-if的共同点</view>
        <view>在 vue 中 v-show 与 v-if 的作用效果是相同的(不含v-else)，都能控制元素在页面是否显示 </view>
        <view>当表达式都为 false 时，都不会占据页面位置</view>
        <view>当表达式结果为 true 时，都会占据页面的位置</view>
        <view class="num">v-show与v-if的区别</view>
        <view class=""> <text class="num">概括：</text> v-if 是动态的向 DOM 树内添加或者删除 DOM 元素；v-show 是通过设置 DOM 元素的 display
            样式属性控制显隐。v-if 切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show 只是简单的基于 css 切换。</view>
        <view>1、控制手段：</view>
        <view>v-show隐藏则是为该元素添加css--display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除</view>
        <view>2、编译过程：</view>
        <view>v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换</view>
        <view>3、编译条件：</view>
        <view>v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染</view>
        <view>4、v-show 由false变为true的时候不会触发组件的生命周期</view>
        <view>
            5、v-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法
        </view>
        <view>6、性能消耗：</view>
        <view>v-if有更高的切换消耗；v-show有更高的初始渲染消耗</view>
        <view class="num">v-show与v-if的使用场景</view>
        <view>v-if 与 v-show 都能控制dom元素在页面的显示</view>
        <view>v-if 相比 v-show 开销更大的（直接操作dom节点增加与删除）</view>
        <view>如果需要非常频繁地切换，则使用 v-show 较好</view>
        <view>如果在运行时条件很少改变，则使用 v-if 较好</view>
    </view>
    <view class="content" wx:if="{{key==7}}">
        <view class="title">v-for和v-if为什么不能放于同一级</view>
        <view>当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级，这意味着 v-if 将分别重复运行于每个 v-for 循环中</view>
        <view>所以，不推荐v-if和v-for同时使用</view>
        <view class="num">使用推荐方式</view>
        <view>1、v-for外层嵌套v-if</view>
        <view>2、放在计算属性遍历</view>
    </view>
    <view class="content" wx:if="{{key==8}}">
        <view class="title">nextTick</view>
        <view>Vue 是组件级更新，如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染，所以为了性能， Vue 会在本轮数据更新后，在异步更新视图。核心思想 nextTick。</view>
        <view>
            nextTick是异步方法，异步渲染最后一步，与JS事件循环联系紧密。主要使用了宏任务微任务（setTimeout、promise那些），定义了一个异步方法，多次调用nextTick会将方法存入队列，通过异步方法清空当前队列。
        </view>
    </view>
    <view class="content" wx:if="{{key==9}}">
        <view class="title">v-for中key的原理</view>
        <view class="num">key值作用总结：</view>
        <view>1、在Vue中，key是虚拟DOM的标识符。Vue会建立一个Map，value为虚拟DOM（是一个对象），key与value配对。</view>
        <view>2、在v-for指令中，默认情况下，列表的index作为key。我们也可以手动指定key。</view>
        <view>————————了解————————</view>
        <view>1、vue中列表循环需加:key=“唯一标识”，唯一标识尽量是item里面id等，因为vue组件高度复用增加Key可以标识组件的唯一性，为了更好地区别各个组件
            key的作用主要是为了高效的更新虚拟DOM。 </view>
        <view>2、key主要用来做dom
            diff算法用的，diff算法是同级比较，比较当前标签上的key还有它当前的标签名，如果key和标签名都一样时只是做了一个移动的操作，不会重新创建元素和删除元素。</view>
        <view>
            3、没有key的时候默认使用的是“就地复用”策略。如果数据项的顺序被改变，Vue不是移动Dom元素来匹配数据项的改变，而是简单复用原来位置的每个元素。如果删除第一个元素，在进行比较时发现标签一样值不一样时，就会复用之前的位置，将新值直接放到该位置，以此类推，最后多出一个就会把最后一个删除掉。
        </view>
        <view>
            4、尽量不要使用索引值index作key值，一定要用唯一标识的值，如id等。因为若用数组索引index为key，当向数组中指定位置插入一个新元素后，因为这时候会重新更新index索引，对应着后面的虚拟DOM的key值全部更新了，这个时候还是会做不必要的更新，就像没有加key一样，因此index虽然能够解决key不冲突的问题，但是并不能解决复用的情况。如果是静态数据，用索引号index做key值是没有问题的。
        </view>
        <view>5、标签名一样，key一样这时候就会就地复用，如果标签名不一样，key一样不会复用。</view>
    </view>
    <view class="content" wx:if="{{key==10}}">
        <view class="title">组件通信</view>
        <view class="num">1、父子组件通信</view>
        <view>父组件向子组件传递数据，使用props属性；子组件向父组件中传递数据，在子组件中使用$emit派发事件，父组件中使用v-on
            监听事件；</view>
        <view>缺点：组件嵌套层次多的话，传递数据比较麻烦。</view>
        <view class="num">2、祖先组件</view>
        <view>祖先组件通过依赖注入(inject / provide)的方式，向其所有子孙后代传递数据；缺点：无法监听数据修改的来源，不支持响应式。通过属性$root / $parent / $children /
            ref，访问根组件、父级组件、子组件中的数据；</view>
        <view>缺点：要求组件之间要有传递性</view>
        <view class="num">3、vuex</view>
        <view>通过 VueJs 的状态管理模式 Vuex，实现多个组件进行数据共享，推荐使用这种方式进行项目中各组件间的数据传递。</view>
    </view>
    <view class="content" wx:if="{{key==11}}">
        <view class="title">computed和watch区别</view>
        <view><text class="num">computed</text>是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算
            computed 的值；</view>
        <view><text class="num">watch</text>更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</view>
        <view class="num">运用场景</view>
        <view>1、当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</view>
        <view>2、当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API
            )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</view>
    </view>
    <view class="content" wx:if="{{key==12}}">
        <view class="title">vnode的diff算法原理</view>
        <view>diff 算法是一种通过同层的树节点进行比较的高效算法</view>
        <view>有两个特点：</view>
        <view>1、比较只会在同层级进行, 不会跨层级比较</view>
        <view>2、在diff比较的过程中，循环从两边向中间比较</view>
        <view>diff 算法的在很多场景下都有应用，在 vue 中，作用于虚拟 dom 渲染成真实 dom 的新旧 VNode 节点比较</view>
    </view>
    <view class="content" wx:if="{{key==14}}">
        <view class="title">Vue项目可以进行哪些优化</view>
        <view class="num">代码层面的优化</view>
        <view>1、v-if 和 v-show 区分使用场景</view>
        <view>2、computed 和 watch 区分使用场景</view>
        <view>3、v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</view>
        <view>4、长列表性能优化</view>
        <view>5、事件的销毁</view>
        <view>6、图片资源懒加载</view>
        <view>7、路由懒加载、异步组件、拆分组件</view>
        <view>8、第三方插件的按需引入</view>
        <view>9、优化无限列表性能</view>
        <view>10、服务端渲染 SSR or 预渲染</view>
        <view>11、防抖节流</view>
        <view class="num">用户体验</view>
        <view>1、app-skeleton 骨架屏</view>
        <!-- <view>2、shellap p壳</view>
        <view>3、pwa</view> -->
        <view class="num">SEO优化</view>
        <view>1、预渲染</view>
        <view class="num">Webpack 层面的优化</view>
        <view>1、Webpack 对图片进行压缩</view>
        <view>2、减少 ES6 转为 ES5 的冗余代码</view>
        <view>3、提取公共代码</view>
        <view>4、模板预编译</view>
        <view>5、提取组件的 CSS</view>
        <view>6、优化 SourceMap</view>
        <view>7、构建结果输出分析</view>
        <view>8、Vue 项目的编译优化</view>
        <view class="num">基础的 Web 技术的优化</view>
        <view>1、开启 gzip 压缩</view>
        <view>2、浏览器缓存</view>
        <view>3、CDN 的使用</view>
        <view>4、使用 Chrome Performance 查找性能瓶颈</view>
    </view>
    <view class="content" wx:if="{{key==15}}">
        <view class="title">vue中是如何检测数组变化的</view>
        <view class="num">vue2——</view>
        <view>是用函数劫持的方式，重写了数组方法，具体就是更改了数组的原型，更改成自己的，用户调数组的一些方法的时候，走的就是自己的方法，然后通知视图去更新。</view>
        <view>（数组就是使用 object.defineProperty 重新定义数组的每一项，那能引起数组变化的方法我们都是知道的， pop 、 push 、 shift 、 unshift 、 splice 、 sort
            、 reverse 这七种，只要这些方法执行改了数组内容，我就更新内容就好了。）</view>
        <view class="num">vue3——</view>
        <view>改用 proxy ，可直接监听对象数组的变化。</view>
    </view>
    <view class="content" wx:if="{{key==16}}">
        <view class="title">Vue的事件绑定原理</view>
        <view class="num">原生 DOM 的绑定</view>
        <view>Vue在创建真实DOM时会调用createElm，默认会调用 invokeCreateHooks 。会遍历当前平台下相对的属性处理代码，其中就有updateDOMListeners方法，内部会传入
            add()方法。</view>
        <view class="num">组件绑定事件，原生事件，自定义事件</view>
        <view>组件绑定之间是通过Vue中自定义的 $on 方法实现的。 （可以理解为：组件的 nativeOnOn 等价于 普通元素on 组件的on会单独处理）</view>
    </view>
    <view class="content" wx:if="{{key==17}}">
        <view class="title">父子组件生命周期调用顺序</view>
        <view><text class="num">渲染顺序:</text>先父后子，<text class="num">完成顺序:</text>先子后父</view>
        <view><text class="num"> 更新顺序:</text>父更新导致子更新，子更新完成后父</view>
        <view><text class="num"> 销毁顺序:</text>先父后子，<text class="num">完成顺序:</text>先子后父</view>
    </view>
    <view class="content" wx:if="{{key==18}}">
        <view class="title">data为什么是函数</view>
        <view>因为JavaScript的特性所导致，在component中，data必须以函数的形式存在，不可以是对象。
        </view>
        <view>组建中的data写成一个函数，数据以函数返回值的形式定义，这样每次复用组件的时候，都会返回一份新的data，相当于每个组件实例都有自己私有的数据空间，它们只负责各自维护的数据，不会造成混乱。</view>
        <view>而单纯的写成对象形式，就是所有的组件实例共用了一个data，这样改一个全都改了。</view>
    </view>
    <view class="content" wx:if="{{key==19}}">
        <view class="title">v-html 会导致哪些问题</view>
        <view>1、XSS 攻击</view>
        <view>2、v-html 会替换标签内部的元素</view>
    </view>
    <view class="content" wx:if="{{key==20}}">
        <view class="title">为什么要使用异步组件？</view>
        <view>1、节省打包出的结果，异步组件分开打包，采用jsonp的方式进行加载，有效解决文件过大的问题。</view>
        <view>2、核心就是包组件定义变成一个函数，依赖 import()语法，可以实现文件的分割加载。</view>
    </view>
    <view class="content" wx:if="{{key==21}}">
        <view class="title">action 与 mutation 的区别</view>
        <view>1、mutation 是同步更新， $watch 严格模式下会报错。</view>
        <view>2、action 是异步操作，可以获取数据后调用 mutation 提交最终数据。</view>
    </view>
    <view class="content" wx:if="{{key==22}}">
        <view class="title">插槽与作用域插槽的区别</view>
        <view class="num">插槽</view>
        <view>1、创建组件虚拟节点时，会将组件儿子的虚拟节点保存起来。当初始化组件时，通过插槽属性将儿子进行分类 {a:[vnode],b[vnode]}</view>
        <view>2、渲染组件时会拿对应的 slot 属性的节点进行替换操作。（插槽的作用域为父组件）</view>
        <view class="num">作用域插槽</view>
        <view>1、作用域插槽在解析的时候不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。</view>
        <view>2、普通插槽渲染的作用域是父组件，作用域插槽的渲染作用域是当前子组件。</view>
    </view>
    <view class="content" wx:if="{{key==23}}">
        <view class="title">谈谈对keep-alive的了解</view>
        <view>keep-alive 可以实现组件的缓存，当组件切换时不会对当前组件进行卸载。</view>
        <view>常用的2个属性 include/exclude ，</view>
        <view>常用的2个生命周期 activated，deactivated</view>
    </view>
    <view class="content" wx:if="{{key==24}}">
        <view class="title">VueX</view>
        <view>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</view>
        <view class="num">状态管理模式</view>
        <view>把组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！这就是“状态管理模式”。</view>
        <view class="num">应用场景</view>
        <view>单页应用中，组件之间的数据状态。 </view>
        <view class="num"> 应用实例</view>
        <view>1、购物车功能；</view>
        <view>2、下单页面有选择优惠券按钮，点击进入优惠券页面，选择后返回到下单页，数据会绑定回来，显示已选择的优惠券； </view>
        <view>3、登录状态等等</view>
        <view class="title">Vuex属性</view>
        <view> State、 Getter、Mutation 、Action、 Module</view>
        <view class="num">State特性</view>
        <view>1、Vuex就是一个仓库，仓库里面放了很多对象。其中state就是数据源存放地，对应于一般Vue对象里面的data</view>
        <view>2、state里面存放的数据是响应式的，Vue组件从store中读取数据，若是store中的数据发生改变，依赖这个数据的组件也会发生更新</view>
        <view>3、它通过mapState把全局的 state 和 getters 映射到当前组件的 computed 计算属性中</view>
        <view class="num">Getter特性</view>
        <view>1、getters 可以对State进行计算操作，它就是Store的计算属性</view>
        <view>2、虽然在组件内也可以做计算属性，但是getters 可以在多组件之间复用</view>
        <view>3、如果一个状态只在一个组件内使用，是可以不用getters</view>
        <view class="num">Action&Mutation特性</view>
        <view>Action 类似于 mutation，不同在于：Action 提交的是 mutation，而不是直接变更状态；Action 可以包含任意异步操作。</view>
        <view class="num">Module特性</view>
        <view>Module 可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</view>
        <view class="title">Vuex的好处</view>
        <view>1、多层嵌套的组件、兄弟组件间的状态会更好管理维护。</view>
        <view>2、缓存一些当前要使用请求远程或本地的数据集（刷新后会自己销毁）。</view>
        <view> 3、有了第二条，就可以减少向服务器的请求，节省资源。如果你的用户足够多，那么每多出一个请求，对公司来说，都是一大笔钱。</view>
        <view> 4、对开发者来说，如果你的项目足够复杂，团队的规模也不仅是一个人，数据集中处理更利于程序的稳定和维护
        </view>
    </view>
    <view class="content" wx:if="{{key==25}}">
        <view class="title">vue.cli项目中src目录每个文件夹和文件的用法
        </view>
        <view>1、components存放组件</view>
        <view>2、app.vue主页面入口</view>
        <view>3、main.js主文件入口</view>
        <view>4、assets存放静态资源文件</view>
        <view>5、build 文件夹是保存一些 webpack 的初始化配置。</view>
        <view>6、config 文件夹保存一些项目初始化的配置</view>
        <view>7、node_modules 是 npm 加载的项目依赖的模块</view>
        <view>8、src 目录是我们要开发的目录</view>
    </view>
    <view class="btn">
        <view wx:if="{{key!=0}}" class="pre" bindtap="preQuestion">上一题</view>
        <view bindtap="nextQuestion">下一题</view>
    </view>
</view>